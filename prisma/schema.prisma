// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String?            @unique
  emailVerified     DateTime?
  image             String?
  bio               String             @default("") @db.VarChar(255)
  accounts          Account[]
  sessions          Session[]
  createdJourneys   Journey[]
  followedJourneys  FollowedJourney[]
  completedJourneys CompletedJourney[]
  completedQuests   CompletedQuest[]
  currentJourney    CurrentJourney?
  points            Int                @default(0)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Journey {
  id          String           @id @default(cuid())
  name        String
  createdAt   DateTime         @default(now())
  createdById String
  createdBy   User             @relation(fields: [createdById], references: [id], onDelete: Cascade)
  quests      QuestOnJourney[]

  @@index([createdById])
}

model FollowedJourney {
  journeyId   String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  completedAt DateTime @default(now())

  @@unique([journeyId, userId])
  @@index([userId])
}

model CompletedJourney {
  journeyId   String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  completedAt DateTime @default(now())

  @@unique([journeyId, userId])
  @@index([userId])
}

model CurrentJourney {
  journeyId String
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  startedAt DateTime @default(now())

  @@index([userId])
}

model Quest {
  id      String           @id @default(cuid())
  name    String
  points  Int
  lat     Float
  lng     Float
  action  Action?
  journey QuestOnJourney[]

  @@unique([lat, lng])
}

model QuestOnJourney {
  questId   String
  quest     Quest   @relation(fields: [questId], references: [id], onDelete: Cascade)
  journeyId String
  journey   Journey @relation(fields: [journeyId], references: [id], onDelete: Cascade)

  @@unique([questId, journeyId])
  @@index([journeyId])
}

model CompletedQuest {
  quest_id    String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  completedAt DateTime @default(now())

  @@unique([quest_id, userId])
  @@index([userId])
}

enum Action {
  EAT
  SHOP
  PLAY
}
